name: Release

on:
  push:
    tags:
      - "v*"

env:
  RELEASE_BIN: router
  RELEASE_DIR: artifacts
  REF: "${{ github.ref }}"
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  MACOS_PRIMARY_BUNDLE_ID: com.apollographql.router
  LINUX_GNU_TARGET: x86_64-unknown-linux-gnu

  APPLE_TEAM_ID: "YQK948L752"
  APPLE_USERNAME: "opensource@apollographql.com"

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux-gnu, macos, windows]
        include:
          - build: linux-gnu
            os: ubuntu-16.04
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${REF#refs/*/*}"
          echo ::set-output name=version::"${REF#refs/*/*}"

      - name: Install Node and npm
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Rust
        if: matrix.rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}

      - name: Install build dependencies
        run: cargo xtask install-build-dependencies

      - name: Test
        run: cargo xtask test --verbose --target ${{ matrix.target }}

      - name: Build
        run: cargo xtask dist --verbose --target ${{ matrix.target }}

      - name: Package (not MacOS)
        if: matrix.build != 'macos'
        run: >
          cargo xtask package --verbose
          --target ${{ matrix.target }}
          --output ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.tar.gz

      - name: Package (MacOS)
        if: matrix.build == 'macos'
        run: >
          cargo xtask package --verbose
          --target ${{ matrix.target }}
          --apple-team-id ${{ env.APPLE_TEAM_ID }}
          --apple-username ${{ env.APPLE_USERNAME }}
          --cert-bundle-base64 ${{ secrets.MACOS_CERT_BUNDLE_BASE64 }}
          --cert-bundle-password ${{ secrets.MACOS_CERT_BUNDLE_PASSWORD }}
          --keychain-password ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          --notarization-password ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}
          --primary-bundle-id ${{ env.MACOS_PRIMARY_BUNDLE_ID }}
          --output ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.tar.gz

      - name: Upload Tarball
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.build }}
          path: ./${{ env.RELEASE_DIR }}

  release:
    name: GitHub Release
    needs: build
    runs-on: ubuntu-latest
    env:
      npm-dir: ./installers/npm
      node-version: '14.x'
      registry-url: 'https://registry.npmjs.org'
      is-prerelease: ${{ contains(needs.build.outputs.version, 'alpha') || contains(needs.build.outputs.version, 'beta') || contains(needs.build.outputs.version, 'rc')|| contains(needs.build.outputs.version, 'test')}}
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Unzip binaries
        shell: bash
        run: |
          tar -xzvf ./linux-gnu/${{ env.RELEASE_BIN }}-${{ needs.build.outputs.version }}-${{ env.LINUX_GNU_TARGET }}.tar.gz && mv ./dist/${{ env.RELEASE_BIN }} ./linux-gnu-cli && rm -rf dist
          tar -xzvf ./windows/${{ env.RELEASE_BIN }}-${{ needs.build.outputs.version }}-${{ env.WINDOWS_TARGET }}.tar.gz && mv ./dist/${{ env.RELEASE_BIN }}.exe ./windows-cli.exe && rm -rf dist
          tar -xzvf ./macos/${{ env.RELEASE_BIN }}-${{ needs.build.outputs.version }}-${{ env.MACOS_TARGET }}.tar.gz && mv ./dist/${{ env.RELEASE_BIN }} ./macos-cli && rm -rf dist

      - name: Hash binaries
        id: get_shas
        shell: bash
        run: |
          LINUX_GNU_SHA="$(sha256sum -b linux-gnu-cli | cut -d ' ' -f1)"
          WINDOWS_SHA="$(sha256sum -b windows-cli.exe | cut -d ' ' -f1)"
          MACOS_SHA="$(sha256sum -b macos-cli | cut -d ' ' -f1)"
          failed=0
          if [ ${#LINUX_GNU_SHA} -ne 64 ]; then
            ((failed=$failed+1))
            echo "::debug::\$LINUX_GNU_SHA has not been computed."
          fi

          if [ ${#WINDOWS_SHA} -ne 64 ]; then
            ((failed=$failed+1))
            echo "::debug::\$WINDOWS_SHA has not been computed."
          fi

          if [ ${#MACOS_SHA} -ne 64 ]; then
            ((failed=$failed+1))
            echo "::debug::\$MACOS_SHA has not been computed."
          fi

          if [ "$failed" -gt 0 ]; then
            echo "::debug::Failed to compute $failed checksum(s)."
            exit 1
          fi

          echo ::set-output name=linux-gnu-sha::"$LINUX_GNU_SHA"
          echo ::set-output name=windows-sha::"$WINDOWS_SHA"
          echo ::set-output name=macos-sha::"$MACOS_SHA"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.version }}
          release_name: ${{ needs.build.outputs.version }}
          prerelease: ${{ env.is-prerelease }}
          body: |
            <!-- changelog -->
            ---
            This release was automatically created by [Github Actions](./.github/workflows/release.yml).

            If you would like to verify that the binary you have downloaded was built from the source code
            in this repository, you can compare the output of the commands below to the output of the same
            commands on your machine.

            #### MacOS
            Binaries built for MacOS are signed and notarized, and are automatically verified with [Gatekeeper](https://support.apple.com/guide/deployment-reference-macos/using-gatekeeper-apd02b925e38/web).

            Manual Verification:

            ```console
            $ sha256sum -b $(which ${{ env.RELEASE_BIN }}) | cut -d ' ' -f1
            ${{ steps.get_shas.outputs.macos-sha }}
            ```

            #### GNU Linux

            Manual Verification:

            ```console
            $ sha256sum -b $(which ${{ env.RELEASE_BIN }}) | cut -d ' ' -f1
            ${{ steps.get_shas.outputs.linux-gnu-sha }}
            ```

            #### Windows

            Manual Verification:

            ```powershell
            PS> Get-Command ${{ env.RELEASE_BIN }}

            CommandType     Name                                               Version    Source
            -----------     ----                                               -------    ------
            Application     ${{ env.RELEASE_BIN }}.exe                                         0.0.0.0    C:\Users\username\.${{ env.RELEASE_BIN }}\bin\${{ env.RELEASE_BIN }}.exe

            PS> Get-FileHash C:\Users\username\.${{ env.RELEASE_BIN }}\bin\${{ env.RELEASE_BIN }}.exe

            Algorithm       Hash                                                                   Path
            ---------       ----                                                                   ----
            SHA256          ${{ steps.get_shas.outputs.windows-sha }}       C:\Users\username\.${{ env.RELEASE_BIN }}\bin\${{ env.RELEASE_BIN }}.exe
            ```

      - name: Release Linux GNU tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-gnu/${{ env.RELEASE_BIN }}-${{ needs.build.outputs.version }}-${{ env.LINUX_GNU_TARGET }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ needs.build.outputs.version }}-${{ env.LINUX_GNU_TARGET }}.tar.gz

      - name: Release Windows tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/${{ env.RELEASE_BIN }}-${{ needs.build.outputs.version }}-${{ env.WINDOWS_TARGET }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ needs.build.outputs.version }}-${{ env.WINDOWS_TARGET }}.tar.gz

      - name: Release MacOS tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/${{ env.RELEASE_BIN }}-${{ needs.build.outputs.version }}-${{ env.MACOS_TARGET }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ needs.build.outputs.version }}-${{ env.MACOS_TARGET }}.tar.gz
